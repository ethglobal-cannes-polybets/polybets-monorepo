/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SignatureRSVStruct = {
  r: BytesLike;
  s: BytesLike;
  v: BigNumberish;
};

export type SignatureRSVStructOutput = [r: string, s: string, v: bigint] & {
  r: string;
  s: string;
  v: bigint;
};

export declare namespace PolyBet {
  export type BetSlipStruct = {
    strategy: BigNumberish;
    initialCollateral: BigNumberish;
    finalCollateral: BigNumberish;
    failureReason: string;
    outcome: BigNumberish;
    status: BigNumberish;
  };

  export type BetSlipStructOutput = [
    strategy: bigint,
    initialCollateral: bigint,
    finalCollateral: bigint,
    failureReason: string,
    outcome: bigint,
    status: bigint
  ] & {
    strategy: bigint;
    initialCollateral: bigint;
    finalCollateral: bigint;
    failureReason: string;
    outcome: bigint;
    status: bigint;
  };

  export type ProxiedBetStruct = {
    id: BytesLike;
    betSlipId: BytesLike;
    marketplaceId: BytesLike;
    marketId: BytesLike;
    optionIndex: BigNumberish;
    minimumShares: BigNumberish;
    blockTimestamp: BigNumberish;
    originalCollateralAmount: BigNumberish;
    finalCollateralAmount: BigNumberish;
    sharesBought: BigNumberish;
    sharesSold: BigNumberish;
    outcome: BigNumberish;
    failureReason: string;
  };

  export type ProxiedBetStructOutput = [
    id: string,
    betSlipId: string,
    marketplaceId: string,
    marketId: string,
    optionIndex: bigint,
    minimumShares: bigint,
    blockTimestamp: bigint,
    originalCollateralAmount: bigint,
    finalCollateralAmount: bigint,
    sharesBought: bigint,
    sharesSold: bigint,
    outcome: bigint,
    failureReason: string
  ] & {
    id: string;
    betSlipId: string;
    marketplaceId: string;
    marketId: string;
    optionIndex: bigint;
    minimumShares: bigint;
    blockTimestamp: bigint;
    originalCollateralAmount: bigint;
    finalCollateralAmount: bigint;
    sharesBought: bigint;
    sharesSold: bigint;
    outcome: bigint;
    failureReason: string;
  };
}

export interface PolyBetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMarketplace"
      | "betSlips"
      | "domain"
      | "getBetSlip"
      | "getProxiedBet"
      | "getUserActiveBetslips()"
      | "getUserActiveBetslips(bytes)"
      | "getUserBalance(bytes)"
      | "getUserBalance()"
      | "getUserClosedBets(bytes)"
      | "getUserClosedBets()"
      | "login"
      | "marketIdMapping"
      | "marketplaces"
      | "placeBet"
      | "proxiedBets"
      | "userActiveBetSlips"
      | "userBalances"
      | "userClosedBetSlips"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BetSlipCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "addMarketplace",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "betSlips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBetSlip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxiedBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActiveBetslips()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActiveBetslips(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClosedBets(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClosedBets()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "login",
    values: [string, SignatureRSVStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "marketIdMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, BigNumberish, BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiedBets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userActiveBetSlips",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userClosedBetSlips",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betSlips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBetSlip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProxiedBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserActiveBetslips()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserActiveBetslips(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClosedBets(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClosedBets()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "login", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketIdMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiedBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userActiveBetSlips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userClosedBetSlips",
    data: BytesLike
  ): Result;
}

export namespace BetSlipCreatedEvent {
  export type InputTuple = [betId: BigNumberish, user: AddressLike];
  export type OutputTuple = [betId: bigint, user: string];
  export interface OutputObject {
    betId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PolyBet extends BaseContract {
  connect(runner?: ContractRunner | null): PolyBet;
  waitForDeployment(): Promise<this>;

  interface: PolyBetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMarketplace: TypedContractMethod<
    [
      chainId: BigNumberish,
      family: BigNumberish,
      name: string,
      marketplaceProxy: string
    ],
    [void],
    "nonpayable"
  >;

  betSlips: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint, bigint] & {
        strategy: bigint;
        initialCollateral: bigint;
        finalCollateral: bigint;
        failureReason: string;
        outcome: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  domain: TypedContractMethod<[], [string], "view">;

  getBetSlip: TypedContractMethod<
    [betSlipId: BigNumberish],
    [PolyBet.BetSlipStructOutput],
    "view"
  >;

  getProxiedBet: TypedContractMethod<
    [betId: BigNumberish],
    [PolyBet.ProxiedBetStructOutput],
    "view"
  >;

  "getUserActiveBetslips()": TypedContractMethod<[], [bigint[]], "view">;

  "getUserActiveBetslips(bytes)": TypedContractMethod<
    [authToken: BytesLike],
    [bigint[]],
    "view"
  >;

  "getUserBalance(bytes)": TypedContractMethod<
    [authToken: BytesLike],
    [bigint],
    "view"
  >;

  "getUserBalance()": TypedContractMethod<[], [bigint], "view">;

  "getUserClosedBets(bytes)": TypedContractMethod<
    [authToken: BytesLike],
    [bigint[]],
    "view"
  >;

  "getUserClosedBets()": TypedContractMethod<[], [bigint[]], "view">;

  login: TypedContractMethod<
    [siweMsg: string, sig: SignatureRSVStruct],
    [string],
    "view"
  >;

  marketIdMapping: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  marketplaces: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, string, bigint] & {
        warpRouterId: bigint;
        chainId: bigint;
        chainFamily: bigint;
        name: string;
        marketplaceProxy: string;
        pricingStrategy: bigint;
      }
    ],
    "view"
  >;

  placeBet: TypedContractMethod<
    [
      strategy: BigNumberish,
      totalCollateralAmount: BigNumberish,
      marketplaceIds: BytesLike[],
      marketIds: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  proxiedBets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: string;
        betSlipId: string;
        marketplaceId: string;
        marketId: string;
        optionIndex: bigint;
        minimumShares: bigint;
        blockTimestamp: bigint;
        originalCollateralAmount: bigint;
        finalCollateralAmount: bigint;
        sharesBought: bigint;
        sharesSold: bigint;
        outcome: bigint;
        failureReason: string;
      }
    ],
    "view"
  >;

  userActiveBetSlips: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userClosedBetSlips: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMarketplace"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      family: BigNumberish,
      name: string,
      marketplaceProxy: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "betSlips"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint, bigint] & {
        strategy: bigint;
        initialCollateral: bigint;
        finalCollateral: bigint;
        failureReason: string;
        outcome: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "domain"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBetSlip"
  ): TypedContractMethod<
    [betSlipId: BigNumberish],
    [PolyBet.BetSlipStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProxiedBet"
  ): TypedContractMethod<
    [betId: BigNumberish],
    [PolyBet.ProxiedBetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserActiveBetslips()"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserActiveBetslips(bytes)"
  ): TypedContractMethod<[authToken: BytesLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserBalance(bytes)"
  ): TypedContractMethod<[authToken: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBalance()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserClosedBets(bytes)"
  ): TypedContractMethod<[authToken: BytesLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserClosedBets()"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "login"
  ): TypedContractMethod<
    [siweMsg: string, sig: SignatureRSVStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketIdMapping"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketplaces"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, string, bigint] & {
        warpRouterId: bigint;
        chainId: bigint;
        chainFamily: bigint;
        name: string;
        marketplaceProxy: string;
        pricingStrategy: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [
      strategy: BigNumberish,
      totalCollateralAmount: BigNumberish,
      marketplaceIds: BytesLike[],
      marketIds: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiedBets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: string;
        betSlipId: string;
        marketplaceId: string;
        marketId: string;
        optionIndex: bigint;
        minimumShares: bigint;
        blockTimestamp: bigint;
        originalCollateralAmount: bigint;
        finalCollateralAmount: bigint;
        sharesBought: bigint;
        sharesSold: bigint;
        outcome: bigint;
        failureReason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userActiveBetSlips"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userClosedBetSlips"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "BetSlipCreated"
  ): TypedContractEvent<
    BetSlipCreatedEvent.InputTuple,
    BetSlipCreatedEvent.OutputTuple,
    BetSlipCreatedEvent.OutputObject
  >;

  filters: {
    "BetSlipCreated(uint256,address)": TypedContractEvent<
      BetSlipCreatedEvent.InputTuple,
      BetSlipCreatedEvent.OutputTuple,
      BetSlipCreatedEvent.OutputObject
    >;
    BetSlipCreated: TypedContractEvent<
      BetSlipCreatedEvent.InputTuple,
      BetSlipCreatedEvent.OutputTuple,
      BetSlipCreatedEvent.OutputObject
    >;
  };
}
